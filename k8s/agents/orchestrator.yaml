apiVersion: v1
kind: Service
metadata:
  name: orchestrator
  namespace: ngx-agents
  labels:
    app: orchestrator
    component: agent
    agent-type: coordinator
spec:
  type: ClusterIP
  ports:
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: agent
  selector:
    app: orchestrator
    component: agent
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orchestrator
  namespace: ngx-agents
  labels:
    app: orchestrator
    component: agent
    agent-type: coordinator
spec:
  replicas: 2
  selector:
    matchLabels:
      app: orchestrator
      component: agent
  template:
    metadata:
      labels:
        app: orchestrator
        component: agent
        agent-type: coordinator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ngx-agents-sa
      containers:
      - name: orchestrator
        image: gcr.io/PROJECT_ID/ngx-agent-orchestrator:latest # TODO: Replace PROJECT_ID
        imagePullPolicy: Always
        ports:
        - containerPort: 9001
          name: agent
          protocol: TCP
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: AGENT_NAME
          value: "orchestrator"
        - name: AGENT_PORT
          value: "9001"
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/var/secrets/gcp/gcp-key.json"
        envFrom:
        - configMapRef:
            name: ngx-agents-config
        - configMapRef:
            name: ngx-agents-env
        - secretRef:
            name: ngx-agents-secrets
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        volumeMounts:
        - name: gcp-credentials
          mountPath: /var/secrets/gcp
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: agent
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: agent
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /health
            port: agent
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: gcp-credentials
        secret:
          secretName: gcp-credentials
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - orchestrator
            topologyKey: kubernetes.io/hostname
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: orchestrator-hpa
  namespace: ngx-agents
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: orchestrator
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: orchestrator-pdb
  namespace: ngx-agents
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: orchestrator
      component: agent